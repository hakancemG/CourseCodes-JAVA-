package hakancemgercek.polymorphism;
// Hayvan class'ı---------------------------------
class Hayvan{ // superclass Hayvan.
    private String isim;
    
    public Hayvan(String isim){
        this.isim = isim;
    }
    public String getIsim(){
        return this.isim;
    }
    public void setIsim(String isim){
        this.isim = isim;
    }
    public String getHayvan(){
        return isim;
    }
    
    public void setHayvan(String isim){
        this.isim=isim;
    }
    
    public String konus(){
        return "Hayvan konuşuyor...";
    }
}
// Kedi class'ı---------------------------------
class Kedi extends Hayvan{ // subclass kedi
    /* Aynı dosyada birden fazla class kulllanılmak isteniyorsa,
       "class" tanımlamasından önce "public" erişim belirteci 
       kullanılmaz. Kullanılırsa, class dosyasının ismi yazılımak
       zorundadır.    
    */
    public Kedi(String isim){
        super(isim);
    }
    @Override
    public String konus(){
        return this.getIsim()+" miyavlıyor.";
    }
}
// Köpek class'ı---------------------------------
class Kopek extends Hayvan{ // subclass köpek
    public Kopek(String isim){
        super(isim);
    }
    @Override
    public String konus(){
        return this.getIsim()+" havlıyor.";
    }
}
// Beygir class'ı---------------------------------
class Beygir extends Hayvan{ // subclass beygir
    public Beygir(String isim){
        super(isim);
    }
    @Override
    public String konus(){
        return this.getIsim()+" kişniyor.";
    }
}
// Main class'ı---------------------------------
public class Main {
    public static void main(String[] args){
        Hayvan ref_hayvan = new Beygir("İdris");
        /* subclass'a new ile nesne oluşturup, bunu da superclass'ın nesne 
           referansına atayabiliriz. İşte bu olaya polymorphism denir.
           ref_hayvan referansı, sanki Kedi class'ına ait bir referansmış
           gibi davrandı. Alt sınıfın referansı, üst sınıfın referansına 
           atanmış oldu. Kısaca, bir nesneyi birden fazla nesne olarak 
           kullanabiliriz. Ancak bunun için mutlaka inheritence işlemleri
           olmak zorundadır. Aynı işlemi diğer class'lar için de yapabiliriz.
        */
        Hayvan ref_hayvan2 = new Kopek("Bülent");
        Hayvan ref_hayvan3 = new Kedi("Pide");
        
        System.out.println(ref_hayvan.konus());
        System.out.println(ref_hayvan2.konus());
        System.out.println(ref_hayvan3.konus());
    }
}
